{"version":3,"sources":["Components/Header/Header.js","Components/Card/Card.js","Components/TopCardList/TopCardList.js","Components/CardSmall/CardSmall.js","Components/Overview/Overview.js","Components/Switch/Switch.js","App.js","serviceWorker.js","index.js"],"names":["Header","children","className","Card","username","icon","social","followers","today_followers","cardClass","toLowerCase","src","alt","cardListData","TopCardList","map","cardData","i","key","CardSmall","pageViews","growth","cardSmallList","Overview","Switch","setDarkMode","checked","setChecked","ref","useRef","onChange","current","type","id","htmlFor","App","useState","darkMode","mainClass","changeMedia","mq","matches","useEffect","window","matchMedia","addListener","removeListener","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4c819ad3.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Header.css\";\n\nfunction Header({ children }) {\n  return (\n    <header className=\"Header\">\n      <div className=\"Header-wrapper\">\n        <div className=\"Header-grid\">\n          <div className=\"Header-pageTitle\">\n            <h1 className=\"Header-title\">Social Media Dashboard</h1>\n            <p className=\"Header-subtitle\">Total Followers: 23, 004</p>\n          </div>\n          {children}\n        </div>\n      </div>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\nimport \"./Card.css\";\n\nfunction Card({ username, icon, social, followers, today_followers }) {\n  const cardClass = `Card ${social.toLowerCase()}`;\n  return (\n    <article className={cardClass}>\n      <p className=\"Card-title\">\n        <img src={icon} alt={social} />\n        {username}\n      </p>\n      <p className=\"Card-followers\">\n        <span className=\"Card-followers-number\">{followers}</span>\n        <span className=\"Card-followers-title\">Followers</span>\n      </p>\n      <p className=\"Card-today\">\n        <img src=\"images/icon-up.svg\" alt=\"\" />\n        {today_followers} Today\n      </p>\n    </article>\n  );\n}\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"../Card/Card\";\nimport \"./TopCardList.css\";\n\nconst cardListData = [\n  {\n    username: \"@erickleaopm\",\n    icon: \"images/icon-twitter.svg\",\n    social: \"Twitter\",\n    followers: \"1483\",\n    today_followers: 12,\n  },\n  {\n    username: \"@erickleaopm\",\n    icon: \"images/icon-instagram.svg\",\n    social: \"Instagram\",\n    followers: \"30\",\n    today_followers: 8,\n  },\n  {\n    username: \"@erickleaopm\",\n    icon: \"images/icon-facebook.svg\",\n    social: \"Facebook\",\n    followers: \"50k\",\n    today_followers: 15,\n  },\n  {\n    username: \"@erickleaopm\",\n    icon: \"images/icon-youtube.svg\",\n    social: \"Youtube\",\n    followers: \"20k\",\n    today_followers: -10,\n  },\n];\n\nfunction TopCardList() {\n  return (\n    <section className=\"Top-Cards\">\n      <div className=\"Top-Cards-wrapper\">\n        <div className=\"Top-Cards-grid\">\n          {cardListData.map((cardData, i) => (\n            <Card key={i} {...cardData} />\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}\n\nexport default TopCardList;\n","import React from \"react\";\nimport \"./CardSmall.css\";\n\nfunction CardSmall({ icon, social, pageViews, growth }) {\n  return (\n    <div className=\"Card-small\">\n      <p className=\"Card-small-views\">Page Views</p>\n      <p className=\"Card-small-icon\">\n        <img src={icon} alt={social} />\n      </p>\n      <p className=\"Card-small-number\">{pageViews}</p>\n      <p className=\"Card-small-percentage\">\n        <span>\n          <img src=\"images/icon-up.svg\" alt=\"\" />\n          {growth}%\n        </span>\n      </p>\n    </div>\n  );\n}\n\nexport default CardSmall;\n","import React from \"react\";\nimport CardSmall from \"../CardSmall/CardSmall\";\nimport \"./Overview.css\";\n\nconst cardSmallList = [\n  {\n    icon: \"images/icon-facebook.svg\",\n    social: \"Facebook\",\n    pageViews: \"87\",\n    growth: 3,\n  },\n  {\n    icon: \"images/icon-twitter.svg\",\n    social: \"Twitter\",\n    pageViews: \"52\",\n    growth: 2,\n  },\n  {\n    icon: \"images/icon-instagram.svg\",\n    social: \"Instagram\",\n    pageViews: \"5462\",\n    growth: 1375,\n  },\n  {\n    icon: \"images/icon-youtube.svg\",\n    social: \"YouTube\",\n    pageViews: \"87\",\n    growth: 3,\n  },\n];\n\nfunction Overview() {\n  return (\n    <section className=\"Overview\">\n      <div className=\"Overview-wrapper\">\n        <h2 className=\"Overview-title\">Overview - Today</h2>\n        <div className=\"Overview-grid\">\n          {cardSmallList.map((cardData, i) => (\n            <CardSmall key={i} {...cardData} />\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}\n\nexport default Overview;\n","import React, { useRef } from \"react\";\nimport \"./Switch.css\";\n\nfunction Switch({ setDarkMode, checked, setChecked }) {\n  // React Hooks\n  const ref = useRef(null);\n\n  function handleChange() {\n    setChecked(ref.current.checked);\n    setDarkMode(ref.current.checked);\n  }\n\n  return (\n    <div className=\"Dark-mode\">\n      <p className=\"Dark-mode-title\">Dark Mode</p>\n      <input\n        onChange={handleChange}\n        ref={ref}\n        type=\"checkbox\"\n        checked={checked}\n        className=\"Dark-mode-checkbox\"\n        id=\"checkbox\"\n      />\n      <label className=\"Dark-mode-switch\" htmlFor=\"checkbox\" />\n    </div>\n  );\n}\n\nexport default Switch;\n","import React, { useState, useEffect } from \"react\";\n// Components\nimport Header from \"./Components/Header/Header\";\nimport TopCardList from \"./Components/TopCardList/TopCardList\";\nimport Overview from \"./Components/Overview/Overview\";\nimport Switch from \"./Components/Switch/Switch\";\n// Styles\nimport \"./App.css\";\n\nfunction App() {\n  const [darkMode, setDarkMode] = useState(false);\n  const [checked, setChecked] = useState(false);\n  const mainClass = darkMode ? \"is-dark-mode\" : \"is-light-mode\";\n\n  function changeMedia(mq) {\n    setDarkMode(mq.matches);\n    setChecked(mq.matches);\n  }\n\n  useEffect(() => {\n    const mq = window.matchMedia(\"(prefers-color-scheme: dark)\");\n    mq.addListener(changeMedia);\n    setDarkMode(mq.matches);\n    setChecked(mq.matches);\n    return () => {\n      mq.removeListener(changeMedia);\n    };\n  }, []);\n\n  return (\n    <main className={mainClass}>\n      <Header>\n        <Switch\n          setDarkMode={setDarkMode}\n          checked={checked}\n          setChecked={setChecked}\n        />\n      </Header>\n      <TopCardList />\n      <Overview />\n    </main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}